prev_layers[1]
json_layers<- list.files(dir_folder, pattern = "\\.tif$", full.names = T, recursive = F)
check_layers<- tools::file_path_sans_ext(json_layers) %>% file.path(basename(.)) %>% {.[!. %in% prev_layers]}  %>% paste0(".tif")
check_layers[1]
prev_layers[1]
tools::file_path_sans_ext(json_layers)[1]
json_layers[1]
json_layers<- list.files(dir_folder, pattern = "\\.tif$", full.names = T, recursive = T)
# Listar paquetes necesarios
packages_list<-list("magrittr", "dplyr", "plyr",  "openxlsx", "pbapply", "RColorBrewer", "raster", "terra", "sf")
# Instalar paquetes necesarios no instalados
packagesPrev<- .packages(all.available = TRUE)
lapply(packages_list, function(x) {   if ( ! x %in% packagesPrev ) { install.packages(x, force=T)}    })
# Cargar librerias
lapply(packages_list, library, character.only = TRUE)
# Establecer directorio de trabajo
dir_work<- this.path::this.path() %>% dirname() # espacio de trabajo donde se almacena el codigo actual
sf_use_s2(FALSE)
dir_out<- "K:/Unidades compartidas/Solicitudes/Agras"
IGAC_data<- st_read("C:/Users/victor.rincon/OneDrive - Pontificia Universidad Javeriana/Plantilla paisaje/veredas.gpkg") %>% dplyr::select("Dprtmnt",  "Municip", "Vereda") %>% dplyr::mutate(col.id= seq(nrow(.)))
CAR_data<- st_read("C:/Users/victor.rincon/Mi unidad/Documentos/AA/CAR Municipios 2022.shp")
CAR_data2<- CAR_data %>% dplyr::select("CAR")  %>% dplyr::mutate(col.id= seq(nrow(.)))
data_validada<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/Modelo/BDmodelo.csv", header = T, sep= ";")
data_validada_id<- data_validada %>% dplyr::mutate(x= decimalLongitude, y= decimalLatitude, row.id= seq(nrow(.)))
unique_id<- data_validada_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, row.id) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
compiled_data<- list(data_validada_id, int_vereda, int_CAR) %>% plyr::join_all()
compiled_data$Dprtmnt
spatial_data<- compiled_data %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data, file.path(dir_out, "BDmodelo_veredas.xlsx"))
st_write(spatial_data, file.path(dir_out, "BDmodelo_veredas.gpkg"), delete_dsn = T)
compiled_data$CAR
compiled_data_CAR<- list(data_validada_id, int_vereda, int_CAR) %>% plyr::join_all() %>% dplyr::filter(CAR %in% "CAR" )
spatial_data_CAR<- compiled_data_CAR %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data_CAR, file.path(dir_out, "BDmodelo_veredas.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "BDmodelo_veredas.gpkg"), delete_dsn = T)
write.xlsx(compiled_data, file.path(dir_out, "BDmodelo_veredas.xlsx"))
st_write(spatial_data, file.path(dir_out, "BDmodelo_veredas.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "BDmodelo_veredas_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "BDmodelo_veredas_CAR.gpkg"), delete_dsn = T)
dir_out
write.xlsx(compiled_data, file.path(dir_out, "BDmodelo_origianl.xlsx"))
st_write(spatial_data, file.path(dir_out, "BDmodelo_original.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "BDmodelo_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "BDmodelo_CAR.gpkg"), delete_dsn = T)
write.xlsx(compiled_data, file.path(dir_out, "BDmodelo_original.xlsx"))
st_write(spatial_data, file.path(dir_out, "BDmodelo_oiriginal.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "BDmodelo_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "BDmodelo_CAR.gpkg"), delete_dsn = T)
compiled_data
int_CAR$CAR
int_vereda$Vereda
int_vereda$Vereda %>% unique_id
int_vereda$Vereda %>% unique()
names(data_validada)
dir_out
IGAC_data$Dprtmnt
IGAC_data$Dprtmnt %>% unique_id
IGAC_data$Dprtmnt %>% unique()
veredas_car<- dplyr::filter(IGAC_data, Dprtmnt  %in% c("Cundinamarca", "Boyaca"))
st_write(veredas_car, "veredas_cun_boyaca.gpkg")
IGAC_data<- st_read("C:/Users/victor.rincon/OneDrive - Pontificia Universidad Javeriana/Plantilla paisaje/veredas.gpkg")
veredas_car<- dplyr::filter(IGAC_data, Dprtmnt  %in% c("Cundinamarca", "Boyaca"))
st_write(veredas_car, "veredas_cun_boyaca.gpkg")
st_write(veredas_car, "veredas_cun_boyaca.gpkg", delete_dsn = T)
int_vereda
unique(int_vereda$Vereda)
unique(int_vereda$Vereda) %>%  iconv(from = "UTF-8", to = "latin1")
unique(int_vereda$Vereda) %>%  {gsub("Ã?", "ñ", .)}
unique(int_vereda$Vereda) %>%  iconv( from = "windows-1252", to = "UTF-8")
unique(int_vereda$Vereda) %>%
sapply(function(x) iconv(x, from = "windows-1252", to = "UTF-8"))
unique(int_vereda$Vereda) %>%
sapply(function(x) iconv(x, from = "ISO-8859-1", to = "UTF-8"))
codificacion_detectada <- guess_encoding(veredas_incorrectas)
library(readr)
codificacion_detectada <- guess_encoding(veredas_incorrectas)
codificacion_detectada <- guess_encoding(int_vereda$Vereda)
codificacion_detectada <- guess_encoding(paste(int_vereda$Vereda, collapse = "\n"))
codificacion_detectada
veredas_corregidas <- sapply(int_vereda$Vereda, function(x) iconv(x, from = codificacion_detectada$encoding[1], to = "UTF-8"))
veredas_corregidas
codificacion_detectada <- guess_encoding(paste(int_vereda$Vereda, collapse = "\n"))
veredas_corregidas <- sapply(int_vereda$Vereda, function(x) iconv(x, from = codificacion_detectada$encoding[1], to = "UTF-8"))
veredas_corregidas
veredas_corregidas <- sapply(unique(int_vereda$Vereda), function(x) iconv(x, from = codificacion_detectada$encoding[1], to = "UTF-8"))
codificacion_detectada <- guess_encoding(paste(int_vereda$Vereda, collapse = "\n"))
veredas_corregidas <- sapply(unique(int_vereda$Vereda), function(x) iconv(x, from = codificacion_detectada$encoding[1], to = "UTF-8"))
veredas_corregidas
unique(int_vereda$Vereda)
corregir_veredas <- function(nombre) {
nombre <- iconv(nombre, from = "UTF-8", to = "UTF-8")  # Asegurar UTF-8
nombre <- gsub("Ã\\?AS", "ÑAS", nombre)  # Corregir ÑAS
nombre <- gsub("Ã\\?A", "ÑA", nombre)  # Corregir ÑA
nombre <- gsub("Ã\\?UELA", "ÑUELA", nombre)  # Corregir ÑUELA
nombre <- gsub("Ã\\?AS BLANCAS", "ÑAS BLANCAS", nombre)  # Corregir ÑAS BLANCAS
nombre <- gsub("RANCHERÃ\\u008dA", "RANCHERÍA", nombre)  # Corregir RANCHERÍA
nombre <- gsub("Ã\\u008d", "Í", nombre)  # Corregir Í
nombre
}
unique(int_vereda$Vereda) %>%  corregir_veredas()
unique(int_vereda$Vereda) %>%  corregir_veredas()
corregir_veredas <- function(nombre) {
nombre <- iconv(nombre, from = "UTF-8", to = "UTF-8")  # Asegurar UTF-8
nombre <- gsub("Ã\\?AS", "ÑAS", nombre)  # Corregir ÑAS
nombre <- gsub("Ã\\?A", "ÑA", nombre)  # Corregir ÑA
nombre <- gsub("Ã\\?UELA", "ÑUELA", nombre)  # Corregir ÑUELA
nombre <- gsub("Ã\\?AS BLANCAS", "ÑAS BLANCAS", nombre)  # Corregir ÑAS BLANCAS
nombre <- gsub("RANCHERÃ[\\u008dÃ]?A", "RANCHERÍA", nombre)  # Ajuste para capturar variaciones en "RANCHERÍA"
nombre <- gsub("Ã\\u008d", "Í", nombre)  # Corregir Í
nombre
}
unique(int_vereda$Vereda) %>%  corregir_veredas()
corregir_veredas <- function(nombre) {
nombre <- iconv(nombre, from = "UTF-8", to = "UTF-8")  # Asegurar UTF-8
nombre <- gsub("Ã\\?AS", "ÑAS", nombre)  # Corregir ÑAS
nombre <- gsub("Ã\\?A", "ÑA", nombre)  # Corregir ÑA
nombre <- gsub("Ã\\?UELA", "ÑUELA", nombre)  # Corregir ÑUELA
nombre <- gsub("Ã\\?AS BLANCAS", "ÑAS BLANCAS", nombre)  # Corregir ÑAS BLANCAS
nombre <- gsub("RANCHERÃ\u008dA", "RANCHERÍA", nombre)  # Ajuste para capturar variaciones en "RANCHERÍA"
nombre <- gsub("Ã\\u008d", "Í", nombre)  # Corregir Í
nombre
}
unique(int_vereda$Vereda) %>%  corregir_veredas()
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
compiled_data<- list(data_validada_id, int_vereda, int_CAR) %>% plyr::join_all()
spatial_data<- compiled_data %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
compiled_data_CAR<- list(data_validada_id, int_vereda, int_CAR) %>% plyr::join_all() %>% dplyr::filter(CAR %in% "CAR" )
spatial_data_CAR<- compiled_data_CAR %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data, file.path(dir_out, "BDmodelo_original.xlsx"))
st_write(spatial_data, file.path(dir_out, "BDmodelo_oiriginal.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "BDmodelo_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "BDmodelo_CAR.gpkg"), delete_dsn = T)
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ";")
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::mutate(x= decimalLongitude, y= decimalLatitude, row.id= seq(nrow(.)))
head(data_gbif_id)
nrow(data_gbif_id)
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, row.id) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
unique_id
# Listar paquetes necesarios
packages_list<-list("magrittr", "dplyr", "plyr",  "openxlsx", "pbapply", "RColorBrewer", "raster", "terra", "sf")
# Instalar paquetes necesarios no instalados
packagesPrev<- .packages(all.available = TRUE)
lapply(packages_list, function(x) {   if ( ! x %in% packagesPrev ) { install.packages(x, force=T)}    })
# Cargar librerias
lapply(packages_list, library, character.only = TRUE)
# Establecer directorio de trabajo
dir_work<- this.path::this.path() %>% dirname() # espacio de trabajo donde se almacena el codigo actual
sf_use_s2(FALSE)
dir_out<- "K:/Unidades compartidas/Solicitudes/Agras"
IGAC_data<- st_read("C:/Users/victor.rincon/OneDrive - Pontificia Universidad Javeriana/Plantilla paisaje/veredas.gpkg") %>% dplyr::select("Dprtmnt",  "Municip", "Vereda") %>% dplyr::mutate(col.id= seq(nrow(.)))
CAR_data<- st_read("C:/Users/victor.rincon/Mi unidad/Documentos/AA/CAR Municipios 2022.shp")
CAR_data2<- CAR_data %>% dplyr::select("CAR")  %>% dplyr::mutate(col.id= seq(nrow(.)))
veredas_car<- dplyr::filter(IGAC_data, Dprtmnt  %in% c("Cundinamarca", "Boyaca"))
corregir_veredas <- function(nombre) {
nombre <- iconv(nombre, from = "UTF-8", to = "UTF-8")  # Asegurar UTF-8
nombre <- gsub("Ã\\?AS", "ÑAS", nombre)  # Corregir ÑAS
nombre <- gsub("Ã\\?A", "ÑA", nombre)  # Corregir ÑA
nombre <- gsub("Ã\\?UELA", "ÑUELA", nombre)  # Corregir ÑUELA
nombre <- gsub("Ã\\?AS BLANCAS", "ÑAS BLANCAS", nombre)  # Corregir ÑAS BLANCAS
nombre <- gsub("RANCHERÃ\u008dA", "RANCHERÍA", nombre)  # Ajuste para capturar variaciones en "RANCHERÍA"
nombre <- gsub("Ã\\u008d", "Í", nombre)  # Corregir Í
nombre
}
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::mutate(x= decimalLongitude, y= decimalLatitude, row.id= seq(nrow(.)))
data_gbif_id<- data_gbif %>% dplyr::mutate(x= decimalLongitude, y= decimalLatitude, row.id= seq(nrow(.)), id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique(data_gbif_id$id_coord)
unique(data_gbif_id$id_coord) %>% length()
data_gbif_id<- data_gbif %>% dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
unique_id
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_vereda$Vereda<- unique(int_vereda$Vereda) %>%  corregir_veredas()
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_vereda$Vereda<- int_vereda$Vereda %>%  corregir_veredas()
int_vereda$Vereda
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
int_CAR$CAR
compiled_data<- list(unique_id, int_vereda, int_CAR) %>% plyr::join_all()
unique_id
unique_id
data_gbif_id2<- list(data_gbif_id, dplyr::select(unique_id, c("id_coord" ,  "row.id"))) %>% plyr::join_all()
dplyr::select(unique_id, c("id_coord" ,  "row.id"))
data_gbif_id2<- list(data_gbif_id, dplyr::select(st_drop_geometry(unique_id), c("id_coord" ,  "row.id"))) %>% plyr::join_all()
compiled_data<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all()
compiled_data$Vereda
compiled_data$Vereda %>% unique_id
compiled_data$Vereda %>% is.na()
compiled_data$Vereda %>% is.na() %>% table()
nrow(data_gbif)
nrow(data_gbif_id)
nrow(unique_id)
names(data_gbif_id)
names(data_validada)
data_validada<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/Modelo/BDmodelo.csv", header = T, sep= ";")
names(data_validada)
data_validada<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/Modelo/BDmodelo.csv", header = T, sep= ",")
names(data_validada)
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLongitude", "locality", "verbatimElevation", "datasetName")) %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLongitude", "locality", "elevation", "datasetName")) %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
### gbif_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLongitude", "locality", "elevation", "eventDate")) %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate"))
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_vereda$Vereda<- int_vereda$Vereda %>%  corregir_veredas()
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
### gbif_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_vereda$Vereda<- int_vereda$Vereda %>%  corregir_veredas()
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
data_gbif_id2<- list(data_gbif_id, dplyr::select(st_drop_geometry(unique_id), c("id_coord" ,  "row.id"))) %>% plyr::join_all()
compiled_data<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all()
spatial_data<- compiled_data %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
compiled_data_CAR<- list(data_gbif_id, int_vereda, int_CAR) %>% plyr::join_all() %>% dplyr::filter(CAR %in% "CAR" )
spatial_data_CAR<- compiled_data_CAR %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data, file.path(dir_out, "gbif_04_2024_original.xlsx"))
st_write(spatial_data, file.path(dir_out, "gbif_04_2024_oiriginal.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "gbif_04_2024_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "gbif_04_2024_CAR.gpkg"), delete_dsn = T)
dir_out
spatial_data
spatial_data_CAR
source("~/puntos interseccion sf.R", echo=TRUE)
compiled_data_CAR
data_gbif_id
compiled_data_CAR<- list(data_gbif_id, int_vereda, int_CAR) %>% plyr::join_all()
data_gbif_id
data_gbif_id2
compiled_data_CAR<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all() %>% dplyr::filter(CAR %in% "CAR" )
compiled_data_CAR
is.na(compiled_data_CAR$CAR)
is.na(compiled_data_CAR$CAR) %>% table()
compiled_data_CAR<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all() %>% dplyr::filter(CAR %in% "CAR" )
spatial_data_CAR<- compiled_data_CAR %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data, file.path(dir_out, "gbif_04_2024_original.xlsx"))
st_write(spatial_data, file.path(dir_out, "gbif_04_2024_oiriginal.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "gbif_04_2024_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "gbif_04_2024_CAR.gpkg"), delete_dsn = T)
dir_out
data_gbif_id<- data_gbif %>% dplyr::select(c("occurrenceID", "decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>% dplyr::distinct()
View(data_gbif_id)
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude", "locality", "elevation")) %>% dplyr::distinct()
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude", "locality")) %>% dplyr::distinct()
### gbif_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/gbif_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>% dplyr::distinct() %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_vereda$Vereda<- int_vereda$Vereda %>%  corregir_veredas()
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
data_gbif_id2<- list(data_gbif_id, dplyr::select(st_drop_geometry(unique_id), c("id_coord" ,  "row.id"))) %>% plyr::join_all()
compiled_data<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all()
spatial_data<- compiled_data %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
compiled_data_CAR<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all() %>% dplyr::filter(CAR %in% "CAR" )
spatial_data_CAR<- compiled_data_CAR %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data, file.path(dir_out, "gbif_04_2024_original.xlsx"))
st_write(spatial_data, file.path(dir_out, "gbif_04_2024_oiriginal.gpkg"), delete_dsn = T)
write.xlsx(compiled_data_CAR, file.path(dir_out, "gbif_04_2024_CAR.xlsx"))
st_write(spatial_data_CAR, file.path(dir_out, "gbif_04_2024_CAR.gpkg"), delete_dsn = T)
### gbif_COL_15_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>% dplyr::distinct() %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
### gbif_COL_15_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude")) %>% dplyr::distinct()
View(data_gbif_id)
### gbif_COL_15_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude")) %>% dplyr::distinct() %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>% dplyr::distinct() %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude", "locality", "elevation", "eventDate")) %>% na.omit() %>%  dplyr::distinct() %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
### gbif_COL_15_04_2024
data_gbif<- read.csv("D:/Repositorios/biomodelos-sdm/study-cases/agras/data/FULL/gbif_COL_15_04_2024.csv", header = T, sep= ",")
data_gbif_id<- data_gbif %>% dplyr::select(c("decimalLongitude", "decimalLatitude")) %>% na.omit() %>%  dplyr::distinct() %>%
dplyr::mutate(x= decimalLongitude, y= decimalLatitude,  id_coord=  paste(x, y, sep = "_") ) %>%  mutate(id_coord = as.integer(as.factor(id_coord)))
unique_id<- data_gbif_id %>% dplyr::select(decimalLatitude, decimalLongitude, x, y, id_coord) %>% dplyr::distinct() %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326) %>% dplyr::mutate(row.id= seq(nrow(.)))
int_vereda <- st_intersects(unique_id, IGAC_data) %>% as.data.frame() %>% list(st_drop_geometry(IGAC_data)) %>% plyr::join_all()  %>% dplyr::select(-"col.id")
int_vereda$Vereda<- int_vereda$Vereda %>%  corregir_veredas()
int_CAR <- st_intersects(unique_id, CAR_data2) %>% as.data.frame() %>% list(st_drop_geometry(CAR_data2)) %>% plyr::join_all() %>% dplyr::select(-"col.id")
data_gbif_id2<- list(data_gbif_id, dplyr::select(st_drop_geometry(unique_id), c("id_coord" ,  "row.id"))) %>% plyr::join_all()
compiled_data<- list(data_gbif_id2, int_vereda, int_CAR) %>% plyr::join_all()
spatial_data<- compiled_data %>% sf::st_as_sf(coords = c("x", "y"), crs = 4326)
write.xlsx(compiled_data, file.path(dir_out, "gbif_COL_15_04_2024_original.xlsx"))
st_write(spatial_data, file.path(dir_out, "gbif_COL_15_04_2024_oiriginal.gpkg"), delete_dsn = T)
compiled_data$Vereda %>% table()
compiled_data$Vereda %>% is.na()  %>% table()
mdls
library(geodata)
# Cargar paquetes
packagesList<-list("raster","rgdal","qdapRegex", "pbapply","parallel","sf","fasterize","dplyr","plyr","maditr","vegan","geosphere")
lapply(packagesList, library, character.only = TRUE)
# Listar paquetes necesarios
packages_list<-list("magrittr", "dplyr", "plyr",  "openxlsx", "ggplot2", "terra", "raster", "sf", "rnaturalearth",
"automap", "PresenceAbsence", "devtools", "CoordinateCleaner", "spThin", "dismo","biomod2", "ENMeval", "rgdal", "rJava", "kuenm")
# Instalar paquetes necesarios no instalados
packagesPrev<- .packages(all.available = TRUE)
lapply(packages_list, function(x) {   if ( ! x %in% packagesPrev ) { install.packages(x, force=T)}    })
# install.packages("https://cran.r-project.org/src/contrib/Archive/rgdal/rgdal_1.6-7.tar.gz", repos=NULL, type="source")
# install.packages("https://cran.r-project.org/bin/macosx/big-sur-x86_64/contrib/4.3/rJava_1.0-11.tgz", repos=NULL, type="source")
# devtools::install_github("marlonecobos/kuenm")
# Cargar librerias
lapply(packages_list, library, character.only = TRUE)
# Establecer directorio de trabajo
dir_work<- this.path::this.path() %>% dirname() # espacio de trabajo donde se almacena el codigo actual
#### script modelling ####
# directorio de trabajo - modelling
dir_modelling<- file.path(dirname(dirname(dir_work)), "modelling")
# cargar funciones predefinidas
setwd(dir_modelling); source("setup.R"); source("R/fit_biomodelos.R")
srtm <- raster::getData('worldclim', var='bio', res = 0.5, country = 'COL', path= "K:/Unidades compartidas/Solicitudes/Agras/variablesv1")
library(geodata )
worldclimvars <- geodata::worldclim_country('worldclim', var='bio', res = 0.5, country = 'COL', path= "K:/Unidades compartidas/Solicitudes/Agras/variablesv1")
srtm <- raster::getData('worldclim', var='bio', res = 0.5, country = 'COL', path= "K:\Unidades compartidas\Solicitudes\Agras\variablesv1")
dir_vars_COL<- "K:/Unidades compartidas/Solicitudes/Agras/variables_CO"
srtm <- raster::getData('worldclim', var='bio', res = 0.5, country = 'COL', path= dir_vars_COL)
world <- ne_countries(scale = "medium", returnclass = "sf");
colombia <- world[world$admin == "Colombia", ]
area_interes <- extent(colombia)  # Longitudes y latitudes ejemplo
area_interes
colombia
windows<- list(c("Lat"= 7.5, "Long"= -72.5), c("Lat"= 7.5, "Long"= -77.5), c("Lat"= 2.5, "Long"= -77.5), c("Lat"= 2.5, "Long"= -72.5),c("Lat"= 2.5, "Long"= -72.5), c("Lat"= 2.5, "Long"= -67.5), c("Lat"= 7.5, "Long"= -67.5), c("Lat"= 12.5, "Long"= -72.5),
c("Lat"= 12.5, "Long"= -77.5), c("Lat"= -2.5, "Long"= -67.5), c("Lat"= -2.5, "Long"= -77.5))
windows
# Listar paquetes necesarios
packages_list<-list("magrittr", "dplyr", "plyr", "MatchIt", "RItools", "Hmisc", "this.path", "scales", "ggdendro", "data.table", "openxlsx",
"tibble", "leaps", "pbapply", "RColorBrewer", "ggpubr", "ggdist")
data_ERROR<-readRDS("C:/Users/victor.rincon/Documents/data_ERROR.rds")
m.nn2<- matchit(formula_glm, data =data_ERROR, method= "nearest", ratio = 1)
lapply(packages_list, library, character.only = TRUE)
data_ERROR<-readRDS("C:/Users/victor.rincon/Documents/data_ERROR.rds")
m.nn2<- matchit(formula_glm, data =data_ERROR, method= "nearest", ratio = 1)
m.nn2<- matchit(MC ~ Ecoregions + National_R + Tra_Time00 + Dis_Def + D7Set10000 +
Department + D7Set1000 + Slope + Dis_Rivers + Pop2000 + Departme_R +
District_R + D7Set10 + D17Set5000 + D7Set5000 + D17Set10 +
Elevation + Anual_Prec + Prec_Seas, data =data_ERROR, method= "nearest", ratio = 1)
View(m.nn2)
m.nn2
View(m.nn2)
View(m.nn2)
library(ggplot2)
set.seed(123)  # Para reproducibilidad
datos <- data.frame(
x = rnorm(100),  # 100 números aleatorios normalmente distribuidos
y = rnorm(100)   # 100 números aleatorios normalmente distribuidos
)
plot_prev<- ggplot(datos, aes(x = x, y = y)) +
geom_point() +
labs(title = "Gráfico de Dispersión", x = "Variable X", y = "Variable Y")
save("C:/Users/victor.rincon/Documents/test_mc.RData")
library(ggplot2)
set.seed(123)  # Para reproducibilidad
datos <- data.frame(
x = rnorm(100),  # 100 números aleatorios normalmente distribuidos
y = rnorm(100)   # 100 números aleatorios normalmente distribuidos
)
plot_prev<- ggplot(datos, aes(x = x, y = y)) +
geom_point() +
labs(title = "Gráfico de Dispersión", x = "Variable X", y = "Variable Y")
save.image("C:/Users/victor.rincon/Documents/test_mc.RData")
names(data)
head(data)
load("C:/Users/victor.rincon/Documents/test_mc.RData")
# Set working directory
# Uses 'this.path::this.path()' to find the path of the current R script and 'dirname()' to get its directory. This directory is set as the working directory where the current code is stored.
dir_work<- this.path::this.path() %>% dirname()
# Load data. The data should be a table where rows correspond to spatial units (e.g., pixels) and columns represent variables.
# Each spatial unit (row) will serve as the input for the matching process, which will be performed based on the similarity between covars (columns)
setwd(input)
data<- read.csv("data.csv", header = T)
packages_list<-list("magrittr", "dplyr", "plyr", "ggplot2")
lapply(packages_list, library, character.only = TRUE)
load("C:/Users/victor.rincon/Documents/test_mc.RData")
names(data)
packages_list<-list("magrittr", "dplyr", "plyr", "ggplot2")
lapply(packages_list, library, character.only = TRUE)
load("C:/Users/victor.rincon/Documents/test_mc.RData")
names(data)
head(data)
names(data)
head(data)
# Specify the column name in data that defines spatial units in relation to governance type.
# This column indicates which spatial units are associated with a type of governance (1) and which are not (0).
type_gov<- "Type"
table(data[,type_gov])
# List necessary packages
packages_list<-list("magrittr", "dplyr", "plyr", "MatchIt", "RItools", "Hmisc", "this.path", "scales", "ggdendro", "data.table", "openxlsx",
"tibble", "leaps", "pbapply", "RColorBrewer", "ggpubr", "ggdist", "ggh4x")
lapply(packages_list, library, character.only = TRUE)
load("C:/Users/victor.rincon/Documents/test_mc.RData")
# List necessary packages
packages_list<-list("magrittr", "dplyr", "plyr", "MatchIt", "RItools", "Hmisc", "this.path", "scales", "ggdendro", "data.table", "openxlsx",
"tibble", "leaps", "pbapply", "RColorBrewer", "ggpubr", "ggdist", "ggh4x")
# Install necessary packages not installed
packagesPrev<- .packages(all.available = TRUE)
lapply(packages_list, function(x) {   if ( ! x %in% packagesPrev ) { install.packages(x, force=T)}    })
# Load libraries
lapply(packages_list, library, character.only = TRUE)
# Set working directory
# Uses 'this.path::this.path()' to find the path of the current R script and 'dirname()' to get its directory. This directory is set as the working directory where the current code is stored.
dir_work<- this.path::this.path() %>% dirname()
# Set input - output folder
# Establishes paths for input and output directories relative to 'dir_work'. 'file.path()' constructs the path to the directories ensuring it is OS independent.
input<- file.path(dirname(dir_work), "input")
output<- file.path(dirname(dir_work), "output")
# Load data ####
# Load data. The data should be a table where rows correspond to spatial units (e.g., pixels) and columns represent variables.
# Each spatial unit (row) will serve as the input for the matching process, which will be performed based on the similarity between covars (columns)
setwd(input)
data<- readRDS("data2.rds")
names(data)
head(data)
# Specify the column name in data that defines spatial units in relation to governance type.
# This column indicates which spatial units are associated with a type of governance (1) and which are not (0).
type_gov<- "MC"
table(data[,type_gov])
# Remove missing values
data<- data[!is.na(data[,type_gov]),]
# List preliminary covariates-columns in data to estimate similarity for matching.
# These are considered preliminary as they will undergo multicollinearity tests and significance checks in relation to governance type.
covars<-c( "Department", "Anual_Prec", "Prec_Seas",  "Dis_Def",    "Dis_Rivers",
"District_R", "Departme_R", "National_R", "D7Set10",    "D7Set1000",  "D7Set5000",  "D7Set10000", "D17Set10",   "D17Set1000", "D17Set5000",
"D17Set10000", "Ecoregions", "Elevation",  "Pop2000",    "Pop2020",    "Slope",      "Tra_Time00", "Tra_Time15")
# test multicolinearity ####
# Evaluate multicollinearity: It can distort interpretations by inflating the variance of regression coefficients of variables
# For matching analysis, we use the glm typegov ~ covar1 + covar2 + covar3 with a binomial distribution to model the probability of governance based on covariates. This formula can also be used to assess multicollinearity, demonstrating how covariate interactions contribute to variance inflation in relation to typegov by mean of the same glm test.
formula_test_multicor<- as.formula( paste0(type_gov, "~", paste0(covars, collapse = "+")) )
test_multicor<- glm(formula_test_multicor, data = data, family = binomial()) # sort by inflacion de varianza
print(formula_test_multicor)
test_multicor
# The results of this  model are organized as a correlation matrix, which displays multicollinearity among covariates with respect to the response variable typegov.
cordataR<- summary(test_multicor, correlation=T)[["correlation"]] %>% as.data.frame.matrix()
cordataR[,"(Intercept)"]<- NULL; cordataR<- cordataR[2:nrow(cordataR), ]# ELIMINAR INTERCEPT MATRIZ DE CORRELACION
NACol<- names(which(rowSums(is.na(cordataR)) > (ncol(cordataR)/2) ))
cordata<- cordataR %>% {.[!names(.) %in% NACol,]} %>% {.[,!colnames(.) %in% NACol]}; cordata[is.na(cordata)]<-0
str(cordata)
head(cordata)
# From the correlation matrix, we must decide which variables to remove to reduce multicollinearity. To achieve this, we generate groups of correlated variables using a correlation threshold.
cor_threshold<- 0.65 # define correlation threshold
# Covariate clustering
corhclust <- hclust(as.dist(1-abs(cordata)))
cordend<-as.dendrogram(corhclust)
cordend_data <- dendro_data(cordend)
# Plot dendrogram of correlated variables. The dendrogram visualizes the correlation among variables, highlighting groups of correlated covariables based on the defined correlation threshold (cor_threshold) marked by a red line.
var_table <- with(cordend_data$labels, data.frame(y_center = x, y_min= x-0.5, y_max=x+0.5, Variable = as.character(label), height = 1))
col1<- "#EBEBEB"; col2<- "white"; is.even<- function(x){ x %% 2 == 0 }
var_table$col<- rep_len(c(col1, col2), length.out=length(var_table$Variable)) %>% {if(is.even(length(.))) {rev(.)} else {.}}
segment_data <- with(segment(cordend_data), data.frame(x = y, y = x, xend = yend, yend = xend, cor= 1-yend))
ggdendroPlot <-   ggplot()+
annotate("rect", xmin = -0.05, xmax = 1.04, fill = var_table$col,ymin = var_table$y_min , ymax = var_table$y_max, alpha = 0.75 )+
geom_segment(data= segment_data, aes(x = 1-x, y = y, xend = 1-xend, yend = yend, label= cor), size= 0.3)+
scale_y_continuous(breaks = cordend_data$labels$x,  labels = cordend_data$labels$label )+
coord_cartesian(expand = F)+
labs(x= "Correlation", y= "Variables") +
geom_vline(xintercept = cor_threshold, linetype = "dashed", col= "red") +
theme(legend.position =  "bottom", legend.key.width = unit(50, 'pt'),
plot.margin = margin(t = 0, r = 0,  b = 0,l = 0),
panel.grid.major = element_line(color = "gray"),
axis.ticks.length   = unit(0.3, "mm"),
text = element_text(size = 10))
ggdendroPlot
# Remove high-correlated variables. Following exploration, we select one variable per group to reduce multicollinearity, choosing the variable with the lowest VIF in each group. The VIF indicates the level of multicollinearity; thus, keeping the variable with the lowest VIF in each group to effectively reduce multicollinearity.
vif_data<- car::vif(test_multicor) %>% as.data.frame() %>% {data.frame(Var= rownames(.), VIF= .[,1])} %>% arrange(VIF)
vif_values <-  vif_data %>%
dplyr::mutate(Variable1= Var, VIF_var1= VIF, Variable2= Var, VIF_var2= VIF) %>%  dplyr::arrange("VIF")
rank_covars<- cutree(corhclust, h = 1-cor_threshold) %>% as.data.frame %>% rownames_to_column("Var") %>% setnames(".", "group") %>%
dplyr::filter(!Var %in% "(Intercept)") %>% list(vif_data) %>% join_all() %>% arrange(group, VIF)
covars_no_multicol<- dplyr::filter(rank_covars, !duplicated(group))$Var
rank_covars
covars_no_multicol
# Optimization and adjustment for selecting the best model ####
pre_formula_glm<- as.formula( paste0(type_gov, "~", paste0(covars_no_multicol, collapse = "+")) ) # new formula with variables that do not exhibit multicollinearity
# Estimate forward and backward models. This technique iteratively adds and removes variables to find the optimal model that balances complexity with predictive power. We calculate "rsq" (R-squared), "rss" (Residual Sum of Squares), "adjr2" (Adjusted R-squared), "cp" (Mallows' Cp), "bic" (Bayesian Information Criterion), and AIC (Akaike Information Criterion). Each criterion offers a different perspective on model performance, balancing complexity against the risk of overfitting. By default we use AIC to select the better models.
model  <- regsubsets(pre_formula_glm, data = data, nvmax = length(covars), method = "seqrep")
summ_model<-summary(model)[c("rsq", "rss", "adjr2", "cp", "bic" )] %>% as.data.frame() %>% dplyr::mutate(model= seq(nrow(.)))
list_models<- seq(nrow(summ_model))
AIC_models<- pblapply(list_models, function(x){
coefs<- coef(model, id = x) # get coefficients
vars<- names(coefs)[-1] # get vars
form_test<- as.formula( paste0(type_gov, "~", paste0(vars, collapse = "+")) ) # organize form
glm_test<- glm(form_test, data = data, family = binomial()) # run glm
data_AIC<- data.frame(model= x, AIC= extractAIC(glm_test)[2]) # get AIC
data_vars <- data.frame(model= x, vars= vars) # get data vars
data_form<- data.frame(model= x, formula = paste0(type_gov, "~", paste0(vars, collapse = "+")) ) # get data forms
list(data_AIC=data_AIC, data_vars=data_vars, data_form= data_form )   })
